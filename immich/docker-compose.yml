version: "3"

services:

  machine-learning:
    image: ghcr.io/immich-app/immich-machine-learning:release
    container_name: immich_machine_learning
    depends_on:
      - postgresql
      - redis
      - typesense
    environment:
      TZ: Europe/London
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - machine_learning_cache:/cache

  microservices:
    image: ghcr.io/immich-app/immich-server:release
    container_name: immich_microservices
    command:
      - start.sh
      - microservices
    depends_on:
      - postgresql
      - redis
      - typesense
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu,video]
    environment:
      <<: *env-variables
      NVIDIA_DRIVER_CAPABILITIES: all
      NVIDIA_VISIBLE_DEVICES: all 
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - /mnt/media/photos:/usr/src/app/upload

  postgresql:
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    container_name: immich_postgresql
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-"immich"}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-"supersecretpassword"}
      POSTGRES_USER: ${POSTGRES_USER:-"immich"}
      TZ: Europe/London
    healthcheck:
      test: pg_isready --dbname='${POSTGRES_DB}' || exit 1; Chksum="$$(psql --dbname='${POSTGRES_DB}' --username='${POSTGRES_USER}' --tuples-only --no-align --command='SELECT SUM(checksum_failures) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - postgresql_data:/var/lib/postgresql/data

  proxy:
    image: ghcr.io/immich-app/immich-proxy:release
    container_name: immich_proxy
    depends_on:
      - server
      - web
    environment:
      <<: *env-variables
    labels:
      traefik.enable: true
      traefik.http.routers.immich.entrypoints: https-internal,https-external
      traefik.http.services.immich.loadbalancer.passHostHeader: true
      traefik.http.services.immich.loadbalancer.server.port: 8080
    networks:
      - backend
      - proxy
    restart: always

  redis:
    image: docker.io/redis:6.2-alpine@sha256:c0634a08e74a4bb576d02d1ee993dc05dba10e8b7b9492dfa28a7af100d46c01
    container_name: immich_redis
    healthcheck:
      test: redis-cli ping || exit 1
    networks:
      - backend
    restart: always

  server:
    image: ghcr.io/immich-app/immich-server:release
    container_name: immich_server
    command:
      - start.sh
      - immich
    depends_on:
      - postgresql
      - redis
      - typesense
    environment:
      <<: *env-variables
    networks:
      - backend
    restart: always
    volumes:
      - /mnt/media/photos:/usr/src/app/upload

  typesense:
    image: typesense/typesense:0.24.1@sha256:9bcff2b829f12074426ca044b56160ca9d777a0c488303469143dd9f8259d4dd
    container_name: immich_typesense
    environment:
      <<: *env-variables
      GLOB_minloglevel: 1
    networks:
      - backend
    restart: always
    volumes:
      - typesense_data:/data

  web:
    image: ghcr.io/immich-app/immich-web:release
    container_name: immich_web
    environment:
      <<: *env-variables
    networks:
      - backend
    restart: unless-stopped

networks:
  backend:
    external: true
  proxy:
    external: true

volumes:
  machine_learning_cache:
    driver: local
  postgresql_data:
    driver: local
  typesense_data:
    driver: local